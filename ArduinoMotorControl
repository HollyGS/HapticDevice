#include <AFMotor.h>
// Establish motor inputs
AF_DCMotor motor1(1, MOTOR34_64KHZ);
AF_DCMotor motor2(2, MOTOR34_64KHZ);
AF_DCMotor motor3(3, MOTOR12_64KHZ);
AF_DCMotor motor4(4, MOTOR12_64KHZ);



// Flag to know if string sent from Unity has been completely caught
bool stringComplete = false;

// Declaration of a string variable that is sent from Unity to Arduino
String inputString = "";

// Declaration of string variables for each DOFF
String pitchR = "";
String yawR = "";
String pitchL = "";
String yawL = "";

// Declaration of motor outputs
int pitchValueR; 
int yawValueR;
int pitchValueL; 
int yawValueL;

void setup() 
{
// The String reserve() function allows you to allocate a buffer in memory for manipulating Strings.
inputString.reserve(200);

// Start serial communication
Serial.begin(115200);
}


void serialEvent() 
{
  while (Serial.available())
  {
    // get the new byte:
    char inChar = (char)Serial.read(); //char inChar = Serial.read();
    // if the incoming character is a newline, 
    // set a flag so the main loop can do something 
    // about it:
    if (inChar == '\n') 
    {
      //parseCommand(inputString);
      stringComplete = true;
    }
    else 
    {     
      // add it to the inputString:
      inputString += inChar; 
    } 
  }  
}



void loop()
{
  if(stringComplete)
  {
    inputString.trim();

    // My function to process the catched string
    processStringCommand(inputString);
  
    // Clear the current string to catch the next one
    inputString = "";

    // Clear flag
    stringComplete = false;  
    }
}



// My function to process the catched string
void processStringCommand(String cmd)
{


  pitchR = "";
  yawR = "";
  pitchL = "";
  yawL = "";
  
  pitchR = cmd.substring(0, cmd.indexOf(','));
  yawR = cmd.substring(cmd.indexOf(',') + 1,cmd.indexOf(';'));
  pitchL = cmd.substring(cmd.indexOf(';') + 1, cmd.indexOf(':'));
  yawL = cmd.substring(cmd.indexOf(':') + 1);


    pitchValueR = pitchR.toFloat() / 5000 * 255;
    yawValueR = yawR.toFloat() / 5000 * 255;
    pitchValueL = pitchL.toFloat() / 5000 * 255;
    yawValueL = yawL.toFloat() / 5000 * 255;


  // Prevent values over 255 returning to 0
   if(abs(pitchValueR) > 255)
    {
      pitchValueR = 255;
    }

    if(abs(yawValueR) > 255)
    {
      yawValueR = 255;
    }

    if(abs(pitchValueL) > 255)
    {
      pitchValueL = 255;
    }

    if(abs(yawValueL) > 255)
    {
      yawValueL = 255;
    }
    

  //Right pitch motor output
  
  if(pitchR.toFloat() < 0)
  {
    motor1.run(FORWARD);
    motor1.setSpeed(abs(pitchValueR));
  }
  else if(pitchR.toFloat() > 0)
  {
    motor1.run(BACKWARD);
    motor1.setSpeed(abs(pitchValueR));
  }
  else
  {
    motor1.run(RELEASE);
  }
  
  
  // Right yaw motor output
  if(yawR.toFloat() < 0)
  {
    motor2.run(FORWARD);
    motor2.setSpeed(abs(yawValueR));
  }
  else if(yawR.toFloat() > 0)
  {
    motor2.run(BACKWARD);
    motor2.setSpeed(abs(yawValueR));
  }
  else
  {
    motor2.run(RELEASE);
    //Left pitch motor output
  
  if(pitchL.toFloat() < 0)
  {
    motor3.run(BACKWARD);
    motor3.setSpeed(abs(pitchValueL));
  }
  else if(pitchL.toFloat() > 0)
  {
    motor3.run(FORWARD);
    motor3.setSpeed(abs(pitchValueL));
  }
  else
  {
    motor3.run(RELEASE);
  }
  
  
  // Left yaw motor output
  if(yawL.toFloat() < 0)
  {
    motor4.run(FORWARD);
    motor4.setSpeed(abs(yawValueL));
  }
  else if(yawL.toFloat() > 0)
  {
    motor4.run(BACKWARD);
    motor4.setSpeed(abs(yawValueL));
  }
  else
  {
    motor4.run(RELEASE);
  }

 
  }
  }
